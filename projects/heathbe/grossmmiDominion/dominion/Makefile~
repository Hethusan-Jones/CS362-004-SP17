CFLAGS = -Wall -fpic -coverage -lm

rngs.o: rngs.h rngs.c
	gcc -c rngs.c -g  $(CFLAGS)

dominion.o: dominion.h dominion.c rngs.o
	gcc -c dominion.c -g  $(CFLAGS)

playdom: dominion.o playdom.c
	gcc -o playdom playdom.c -g dominion.o rngs.o $(CFLAGS)

testDrawCard: testDrawCard.c dominion.o rngs.o
	gcc -o testDrawCard -g  testDrawCard.c dominion.o rngs.o $(CFLAGS)

badTestDrawCard: badTestDrawCard.c dominion.o rngs.o
	gcc -o badTestDrawCard -g  badTestDrawCard.c dominion.o rngs.o $(CFLAGS)

testBuyCard: testDrawCard.c dominion.o rngs.o
	gcc -o testDrawCard -g  testDrawCard.c dominion.o rngs.o $(CFLAGS)

testAll: dominion.o testSuite.c
	gcc -o testSuite testSuite.c -g  dominion.o rngs.o $(CFLAGS)

interface.o: interface.h interface.c
	gcc -c interface.c -g  $(CFLAGS)

runtests: testDrawCard
	./testDrawCard &> unittestresult.out
	gcov dominion.c >> unittestresult.out
	cat dominion.c.gcov >> unittestresult.out

randomtestcard1: randomtestcard1.c dominion.h dominion.o rngs.o interface.o
	gcc -o randomtestcard1 -g randomtestcard1.c dominion.o rngs.o interface.o $(CFLAGS)

randomtestcard2: randomtestcard2.c dominion.h dominion.o rngs.o interface.o
	gcc -o randomtestcard2 -g randomtestcard2.c dominion.o rngs.o interface.o $(CFLAGS)

randomtestadventurer: randomtestadventurer.c dominion.h dominion.o rngs.o interface.o
	gcc -o randomtestadventurer -g randomtestadventurer.c dominion.o rngs.o interface.o $(CFLAGS) -Wmaybe-uninitialized

unittest1: unittest1.c dominion.o interface.o
	gcc -o unittest1 unittest1.c -g dominion.o interface.o rngs.o $(CFLAGS) 

unittest2: unittest2.c dominion.o interface.o
	gcc -o unittest2 unittest2.c -g dominion.o interface.o rngs.o $(CFLAGS) 

unittest3: unittest3.c dominion.o interface.o
	gcc -o unittest3 unittest3.c -g dominion.o interface.o rngs.o $(CFLAGS) 

unittest4: unittest4.c dominion.o interface.o
	gcc -o unittest4 unittest4.c -g dominion.o interface.o rngs.o $(CFLAGS) 

assign4:
	make clean
	make randomtestcard1
	make randomtestcard2
	make randomtestadventurer
	rm -f randomtestcard1.out
	rm -f randomtestcard2.out
	rm -f randomtestadventurer.out
	./randomtestcard1 >> randomtestcard1.out
	./randomtestcard2 >> randomtestcard2.out
	./randomtestadventurer >> randomtestadventurer.out
	gcov -b dominion.c >> randomtestcard1.out
	gcov -b dominion.c >> randomtestcard2.out
	gcov -b dominion.c >> randomtestadventurer.out
	cat dominion.c.gov >> randomtestcard1.out
	cat dominion.c.gov >> randomtestcard2.out
	cat dominion.c.gov >> randomtestadventurer.out

player: player.c interface.o
	gcc -o player player.c -g  dominion.o rngs.o interface.o $(CFLAGS)

unittestresults.out: $(tests) dominion.o interface.o rngs.o
	./unittest1 &> unittestresults.out
	gcov -b unittest1.c >> unittestresults.out
	cat unittest1.c.gcov >> unittestresults.out
	./unittest2 >> unittestresults.out
	gcov -b unittest2.c >> unittestresults.out
	cat unittest2.c.gcov >> unittestresults.out
	./unittest3 >> unittestresults.out
	gcov -b unittest3.c >> unittestresults.out
	cat unittest3.c.gcov >> unittestresults.out
	./unittest4 >> unittestresults.out
	gcov -b unittest4.c >> unittestresults.out
	cat unittest4.c.gcov >> unittestresults.out

tests: unittest1 unittest2 unittest3 unittest4 cardtest1 cardtest2 cardtest3 cardtest4

unittests: unittest1 unittest2 unittest3 unittest4 

randomtests: randomtest1 randomtest2 randomtestadventurer

all: playdom player testDrawCard testBuyCard badTestDrawCard randomtestcard1 randomtestcard2 randomtestadventurer

clean:
	rm -f *.o playdom.exe playdom test.exe test player player.exe testInit testInit.exe unittestreslts.out *.gcov *.gcda *.gcno *.so
